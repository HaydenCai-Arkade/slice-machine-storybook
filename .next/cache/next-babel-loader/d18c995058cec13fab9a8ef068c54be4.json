{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst {\n  SM_CONFIG_FILE\n} = require('sm-commons/consts');\n/** from relative path */\n\n\nfunction getInfoFromPath(libPath, startPath) {\n  const isLocal = ['@/', '~', '/'].find(e => libPath.indexOf(e) === 0) !== undefined;\n  const pathToLib = path.join(startPath || process.cwd(), isLocal ? '' : 'node_modules', isLocal ? libPath.substring(1, libPath.length) : libPath);\n  const pathToConfig = path.join(pathToLib, SM_CONFIG_FILE);\n  const pathExists = fs.existsSync(pathToLib);\n  let config = {};\n\n  if (fs.existsSync(pathToConfig)) {\n    config = JSON.parse(fs.readFileSync(pathToConfig));\n  }\n\n  const pathToSlices = path.join(pathToLib, config.pathToLibrary || '.', config.slicesFolder || (isLocal ? '.' : 'slices'));\n  return {\n    config,\n    isLocal,\n    pathExists,\n    pathToLib,\n    pathToSlices\n  };\n}\n\nmodule.exports = {\n  getInfoFromPath\n};","map":{"version":3,"sources":["/Users/caiheng/Desktop/slice-machine-storybook/node_modules/next-slicezone/helper.js"],"names":["fs","require","path","SM_CONFIG_FILE","getInfoFromPath","libPath","startPath","isLocal","find","e","indexOf","undefined","pathToLib","join","process","cwd","substring","length","pathToConfig","pathExists","existsSync","config","JSON","parse","readFileSync","pathToSlices","pathToLibrary","slicesFolder","module","exports"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,mBAAD,CAAlC;AAEA;;;AACA,SAASG,eAAT,CAAyBC,OAAzB,EAAkCC,SAAlC,EAA6C;AAC3C,QAAMC,OAAO,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiBC,IAAjB,CAAuBC,CAAD,IAAOJ,OAAO,CAACK,OAAR,CAAgBD,CAAhB,MAAuB,CAApD,MAA2DE,SAA3E;AACA,QAAMC,SAAS,GAAGV,IAAI,CAACW,IAAL,CAChBP,SAAS,IAAIQ,OAAO,CAACC,GAAR,EADG,EAEhBR,OAAO,GAAG,EAAH,GAAQ,cAFC,EAGhBA,OAAO,GAAGF,OAAO,CAACW,SAAR,CAAkB,CAAlB,EAAqBX,OAAO,CAACY,MAA7B,CAAH,GAA0CZ,OAHjC,CAAlB;AAKA,QAAMa,YAAY,GAAGhB,IAAI,CAACW,IAAL,CAAUD,SAAV,EAAqBT,cAArB,CAArB;AACA,QAAMgB,UAAU,GAAGnB,EAAE,CAACoB,UAAH,CAAcR,SAAd,CAAnB;AAEA,MAAIS,MAAM,GAAG,EAAb;;AACA,MAAIrB,EAAE,CAACoB,UAAH,CAAcF,YAAd,CAAJ,EAAiC;AAC/BG,IAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWvB,EAAE,CAACwB,YAAH,CAAgBN,YAAhB,CAAX,CAAT;AACD;;AACD,QAAMO,YAAY,GAAGvB,IAAI,CAACW,IAAL,CACnBD,SADmB,EAEnBS,MAAM,CAACK,aAAP,IAAwB,GAFL,EAGnBL,MAAM,CAACM,YAAP,KAAwBpB,OAAO,GAAG,GAAH,GAAS,QAAxC,CAHmB,CAArB;AAMA,SAAO;AACLc,IAAAA,MADK;AAELd,IAAAA,OAFK;AAGLY,IAAAA,UAHK;AAILP,IAAAA,SAJK;AAKLa,IAAAA;AALK,GAAP;AAOD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA;AADe,CAAjB","sourcesContent":["const fs = require('fs')\nconst path = require('path')\n\nconst { SM_CONFIG_FILEÂ } = require('sm-commons/consts')\n\n/** from relative path */\nfunction getInfoFromPath(libPath, startPath) {\n  const isLocal = ['@/', '~', '/'].find((e) => libPath.indexOf(e) === 0) !== undefined\n  const pathToLib = path.join(\n    startPath || process.cwd(),\n    isLocal ? '' : 'node_modules',\n    isLocal ? libPath.substring(1, libPath.length) : libPath,\n  )\n  const pathToConfig = path.join(pathToLib, SM_CONFIG_FILE)\n  const pathExists = fs.existsSync(pathToLib)\n\n  let config = {}\n  if (fs.existsSync(pathToConfig)) {\n    config = JSON.parse(fs.readFileSync(pathToConfig))\n  }\n  const pathToSlices = path.join(\n    pathToLib,\n    config.pathToLibrary || '.',\n    config.slicesFolder || (isLocal ? '.' : 'slices')\n  )\n\n  return {\n    config,\n    isLocal,\n    pathExists,\n    pathToLib,\n    pathToSlices,\n  }\n}\n\nmodule.exports = {\n  getInfoFromPath\n}"]},"metadata":{},"sourceType":"script"}